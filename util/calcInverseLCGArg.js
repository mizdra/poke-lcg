"use strict";

var _imul = require("babel-runtime/core-js/math/imul");

var _imul2 = _interopRequireDefault(_imul);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toUint32_1 = require('../internal/toUint32');
/**
 * Calculates the inverse argument of LCG.
 * @param lcgArg - The regular argument of LCG
 * @returns      - The inverse argument of LCG
 */
function calcInverseLCGArg(lcgArg) {
  var inverseArg = { multiplier: 0, increment: 0 };
  var mask = 0xFFFFFFFF;
  inverseArg.multiplier = toUint32_1.default(calcPow(lcgArg.multiplier, mask >>> 1, mask));
  inverseArg.increment = toUint32_1.default(~(0, _imul2.default)(inverseArg.multiplier, lcgArg.increment) + 1);
  return inverseArg;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = calcInverseLCGArg;
/**
 * Returns a specified number raised to the specified power.
 * @param a    - The base number
 * @param n    - The exponent used to raise the base
 * @param mask - The mask to filter number
 * @returns    - The number a raised to the power n and filtered with mask
 */
function calcPow(a, n, mask) {
  return n === 0 ? 1 : (0, _imul2.default)(n & 1 ? a : 1, calcPow((0, _imul2.default)(a, a) & mask, n >>> 1, mask));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY2FsY0ludmVyc2VMQ0dBcmcuanMiLCJ1dGlsL2NhbGNJbnZlcnNlTENHQXJnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQ0NBLElBQUEsYUFBQSxRQUFxQixzQkFBckIsQ0FBQTs7Ozs7O0FBT0EsU0FBQSxpQkFBQSxDQUEwQyxNQUExQyxFQUF3RDtBQUNwRCxNQUFJLGFBQXFCLEVBQUMsWUFBWSxDQUFaLEVBQWUsV0FBVyxDQUFYLEVBQXJDLENBRGdEO0FBRXBELE1BQU0sT0FBTyxVQUFQLENBRjhDO0FBSXBELGFBQVcsVUFBWCxHQUF3QixXQUFBLE9BQUEsQ0FBUyxRQUFRLE9BQU8sVUFBUCxFQUFtQixTQUFTLENBQVQsRUFBWSxJQUF2QyxDQUFULENBQXhCLENBSm9EO0FBS3BELGFBQVcsU0FBWCxHQUF3QixXQUFBLE9BQUEsQ0FBUyxDQUFDLG9CQUFVLFdBQVcsVUFBWCxFQUF1QixPQUFPLFNBQVAsQ0FBbEMsR0FBc0QsQ0FBdEQsQ0FBakMsQ0FMb0Q7QUFPcEQsU0FBTyxVQUFQLENBUG9EO0NBQXhEO0FBQUEsT0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLFlBQUEsRUFBQSxFQUFBLE9BQUEsSUFBQSxFQUFBO0FET0EsUUFBUSxPQUFSLEdBQWtCLGlCQUFsQjs7Ozs7Ozs7QUNVQSxTQUFBLE9BQUEsQ0FBaUIsQ0FBakIsRUFBNEIsQ0FBNUIsRUFBdUMsSUFBdkMsRUFBbUQ7QUFDL0MsU0FBTyxNQUFNLENBQU4sR0FBVSxDQUFWLEdBQ0gsb0JBQVcsSUFBSSxDQUFKLEdBQVEsQ0FBUixHQUFZLENBQVosRUFBZ0IsUUFBUSxvQkFBVSxDQUFWLEVBQWEsQ0FBYixJQUFrQixJQUFsQixFQUF3QixNQUFNLENBQU4sRUFBUyxJQUF6QyxDQUEzQixDQURHLENBRHdDO0NBQW5EIiwiZmlsZSI6InV0aWwvY2FsY0ludmVyc2VMQ0dBcmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRvVWludDMyXzEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC90b1VpbnQzMicpO1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIGFyZ3VtZW50IG9mIExDRy5cbiAqIEBwYXJhbSBsY2dBcmcgLSBUaGUgcmVndWxhciBhcmd1bWVudCBvZiBMQ0dcbiAqIEByZXR1cm5zICAgICAgLSBUaGUgaW52ZXJzZSBhcmd1bWVudCBvZiBMQ0dcbiAqL1xuZnVuY3Rpb24gY2FsY0ludmVyc2VMQ0dBcmcobGNnQXJnKSB7XG4gICAgbGV0IGludmVyc2VBcmcgPSB7IG11bHRpcGxpZXI6IDAsIGluY3JlbWVudDogMCB9O1xuICAgIGNvbnN0IG1hc2sgPSAweEZGRkZGRkZGO1xuICAgIGludmVyc2VBcmcubXVsdGlwbGllciA9IHRvVWludDMyXzEuZGVmYXVsdChjYWxjUG93KGxjZ0FyZy5tdWx0aXBsaWVyLCBtYXNrID4+PiAxLCBtYXNrKSk7XG4gICAgaW52ZXJzZUFyZy5pbmNyZW1lbnQgPSB0b1VpbnQzMl8xLmRlZmF1bHQofk1hdGguaW11bChpbnZlcnNlQXJnLm11bHRpcGxpZXIsIGxjZ0FyZy5pbmNyZW1lbnQpICsgMSk7XG4gICAgcmV0dXJuIGludmVyc2VBcmc7XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjSW52ZXJzZUxDR0FyZztcbi8qKlxuICogUmV0dXJucyBhIHNwZWNpZmllZCBudW1iZXIgcmFpc2VkIHRvIHRoZSBzcGVjaWZpZWQgcG93ZXIuXG4gKiBAcGFyYW0gYSAgICAtIFRoZSBiYXNlIG51bWJlclxuICogQHBhcmFtIG4gICAgLSBUaGUgZXhwb25lbnQgdXNlZCB0byByYWlzZSB0aGUgYmFzZVxuICogQHBhcmFtIG1hc2sgLSBUaGUgbWFzayB0byBmaWx0ZXIgbnVtYmVyXG4gKiBAcmV0dXJucyAgICAtIFRoZSBudW1iZXIgYSByYWlzZWQgdG8gdGhlIHBvd2VyIG4gYW5kIGZpbHRlcmVkIHdpdGggbWFza1xuICovXG5mdW5jdGlvbiBjYWxjUG93KGEsIG4sIG1hc2spIHtcbiAgICByZXR1cm4gbiA9PT0gMCA/IDEgOlxuICAgICAgICBNYXRoLmltdWwoKG4gJiAxID8gYSA6IDEpLCBjYWxjUG93KE1hdGguaW11bChhLCBhKSAmIG1hc2ssIG4gPj4+IDEsIG1hc2spKTtcbn1cbiIsImltcG9ydCB7TENHQXJnfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB0b1VpbnQzMiBmcm9tICcuLi9pbnRlcm5hbC90b1VpbnQzMic7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBhcmd1bWVudCBvZiBMQ0cuXG4gKiBAcGFyYW0gbGNnQXJnIC0gVGhlIHJlZ3VsYXIgYXJndW1lbnQgb2YgTENHXG4gKiBAcmV0dXJucyAgICAgIC0gVGhlIGludmVyc2UgYXJndW1lbnQgb2YgTENHXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbGNJbnZlcnNlTENHQXJnKGxjZ0FyZzogTENHQXJnKTogTENHQXJnIHtcbiAgICBsZXQgaW52ZXJzZUFyZzogTENHQXJnID0ge211bHRpcGxpZXI6IDAsIGluY3JlbWVudDogMH07XG4gICAgY29uc3QgbWFzayA9IDB4RkZGRkZGRkY7XG5cbiAgICBpbnZlcnNlQXJnLm11bHRpcGxpZXIgPSB0b1VpbnQzMihjYWxjUG93KGxjZ0FyZy5tdWx0aXBsaWVyLCBtYXNrID4+PiAxLCBtYXNrKSk7XG4gICAgaW52ZXJzZUFyZy5pbmNyZW1lbnQgID0gdG9VaW50MzIofk1hdGguaW11bChpbnZlcnNlQXJnLm11bHRpcGxpZXIsIGxjZ0FyZy5pbmNyZW1lbnQpICsgMSk7XG5cbiAgICByZXR1cm4gaW52ZXJzZUFyZztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3BlY2lmaWVkIG51bWJlciByYWlzZWQgdG8gdGhlIHNwZWNpZmllZCBwb3dlci5cbiAqIEBwYXJhbSBhICAgIC0gVGhlIGJhc2UgbnVtYmVyXG4gKiBAcGFyYW0gbiAgICAtIFRoZSBleHBvbmVudCB1c2VkIHRvIHJhaXNlIHRoZSBiYXNlXG4gKiBAcGFyYW0gbWFzayAtIFRoZSBtYXNrIHRvIGZpbHRlciBudW1iZXJcbiAqIEByZXR1cm5zICAgIC0gVGhlIG51bWJlciBhIHJhaXNlZCB0byB0aGUgcG93ZXIgbiBhbmQgZmlsdGVyZWQgd2l0aCBtYXNrXG4gKi9cbmZ1bmN0aW9uIGNhbGNQb3coYTogbnVtYmVyLCBuOiBudW1iZXIsIG1hc2s6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIG4gPT09IDAgPyAxIDpcbiAgICAgICAgTWF0aC5pbXVsKChuICYgMSA/IGEgOiAxKSwgY2FsY1BvdyhNYXRoLmltdWwoYSwgYSkgJiBtYXNrLCBuID4+PiAxLCBtYXNrKSk7XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
