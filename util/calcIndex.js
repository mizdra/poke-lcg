"use strict";

var _imul = require("babel-runtime/core-js/math/imul");

var _imul2 = _interopRequireDefault(_imul);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toUint32_1 = require('../internal/toUint32');
/**
 * Calclates index from a initial seed 0x00000000 to the targeted seed.
 * This function is based on http://d.hatena.ne.jp/oupo/20150128/1422413218 (author: oupo)
 * @param lcgArg - The argument of LCG
 * @param seed   - The seed, which is treated as an unsigned 32-bit integer
 * @returns      - The index from a initial seed 0x00000000 to seed
 */
function calcIndexFrom0(lcgArg, seed) {
    return function _calcIndexFrom0(a, b, seed, k) {
        if (k === 0) {
            return 0;
        } else if ((seed & 1) === 0) {
            return toUint32_1.default((0, _imul2.default)(_calcIndexFrom0(toUint32_1.default((0, _imul2.default)(a, a)), toUint32_1.default((0, _imul2.default)(a + 1, b) / 2), toUint32_1.default(seed / 2), k - 1), 2));
        } else {
            return toUint32_1.default((0, _imul2.default)(_calcIndexFrom0(toUint32_1.default((0, _imul2.default)(a, a)), toUint32_1.default((0, _imul2.default)(a + 1, b) / 2), toUint32_1.default(((0, _imul2.default)(a, seed) + b) / 2), k - 1), 2) - 1);
        }
    }(lcgArg.multiplier, lcgArg.increment, seed, 32);
}
/**
 * Calclate index from a initial seed to the targeted seed.
 * @param lcgArg      - The argument of LCG, whose properties are treated as unsigned 32-bit integers
 * @param seed        - The seed, whose index is calculated
 * @param initialSeed - The initial seed, whose index is a reference point
 * @returns           - The index from a initial seed to the targeted seed.
 */
function calcIndex(lcgArg, initialSeed, seed) {
    return calcIndexFrom0(lcgArg, seed) - calcIndexFrom0(lcgArg, initialSeed);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = calcIndex;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY2FsY0luZGV4LmpzIiwidXRpbC9jYWxjSW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FDQ0EsSUFBQSxhQUFBLFFBQXFCLHNCQUFyQixDQUFBOzs7Ozs7OztBQVNBLFNBQUEsY0FBQSxDQUF3QixNQUF4QixFQUF3QyxJQUF4QyxFQUFvRDtBQUNoRCxXQUFPLFNBQUMsZUFBQSxDQUF5QixDQUF6QixFQUFvQyxDQUFwQyxFQUErQyxJQUEvQyxFQUE2RCxDQUE3RCxFQUFzRTtBQUMxRSxZQUFJLE1BQU0sQ0FBTixFQUFTO0FBQ2YsbUJBQU8sQ0FBUCxDQURlO1NBQWIsTUFFSSxJQUFJLENBQUMsT0FBTyxDQUFQLENBQUQsS0FBZSxDQUFmLEVBQWtCO0FBQzVCLG1CQUFPLFdBQUEsT0FBQSxDQUFTLG9CQUFVLGdCQUNoQixXQUFBLE9BQUEsQ0FBUyxvQkFBVSxDQUFWLEVBQWEsQ0FBYixDQUFULENBRGdCLEVBRWhCLFdBQUEsT0FBQSxDQUFTLG9CQUFVLElBQUksQ0FBSixFQUFPLENBQWpCLElBQXNCLENBQXRCLENBRk8sRUFHaEIsV0FBQSxPQUFBLENBQVMsT0FBTyxDQUFQLENBSE8sRUFJaEIsSUFBSSxDQUFKLENBSk0sRUFLUCxDQUxPLENBQVQsQ0FBUCxDQUQ0QjtTQUF0QixNQU9BO0FBQ04sbUJBQU8sV0FBQSxPQUFBLENBQVMsb0JBQVUsZ0JBQ2hCLFdBQUEsT0FBQSxDQUFTLG9CQUFVLENBQVYsRUFBYSxDQUFiLENBQVQsQ0FEZ0IsRUFFaEIsV0FBQSxPQUFBLENBQVMsb0JBQVUsSUFBSSxDQUFKLEVBQU8sQ0FBakIsSUFBc0IsQ0FBdEIsQ0FGTyxFQUdoQixXQUFBLE9BQUEsQ0FBUyxDQUFDLG9CQUFVLENBQVYsRUFBYSxJQUFiLElBQXFCLENBQXJCLENBQUQsR0FBMkIsQ0FBM0IsQ0FITyxFQUloQixJQUFJLENBQUosQ0FKTSxFQUtQLENBTE8sSUFLRixDQUxFLENBQWhCLENBRE07U0FQQTtLQUhBLENBa0JMLE9BQU8sVUFBUCxFQUFtQixPQUFPLFNBQVAsRUFBa0IsSUFsQmpDLEVBa0J1QyxFQWxCdkMsQ0FBUCxDQURnRDtDQUFwRDs7Ozs7Ozs7QUE2QkEsU0FBQSxTQUFBLENBQWtDLE1BQWxDLEVBQWtELFdBQWxELEVBQXVFLElBQXZFLEVBQW1GO0FBQy9FLFdBQU8sZUFBZSxNQUFmLEVBQXVCLElBQXZCLElBQStCLGVBQWUsTUFBZixFQUF1QixXQUF2QixDQUEvQixDQUR3RTtDQUFuRjtBQUFBLE9BQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxZQUFBLEVBQUEsRUFBQSxPQUFBLElBQUEsRUFBQTtBRE5BLFFBQVEsT0FBUixHQUFrQixTQUFsQiIsImZpbGUiOiJ1dGlsL2NhbGNJbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgdG9VaW50MzJfMSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3RvVWludDMyJyk7XG4vKipcbiAqIENhbGNsYXRlcyBpbmRleCBmcm9tIGEgaW5pdGlhbCBzZWVkIDB4MDAwMDAwMDAgdG8gdGhlIHRhcmdldGVkIHNlZWQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGJhc2VkIG9uIGh0dHA6Ly9kLmhhdGVuYS5uZS5qcC9vdXBvLzIwMTUwMTI4LzE0MjI0MTMyMTggKGF1dGhvcjogb3VwbylcbiAqIEBwYXJhbSBsY2dBcmcgLSBUaGUgYXJndW1lbnQgb2YgTENHXG4gKiBAcGFyYW0gc2VlZCAgIC0gVGhlIHNlZWQsIHdoaWNoIGlzIHRyZWF0ZWQgYXMgYW4gdW5zaWduZWQgMzItYml0IGludGVnZXJcbiAqIEByZXR1cm5zICAgICAgLSBUaGUgaW5kZXggZnJvbSBhIGluaXRpYWwgc2VlZCAweDAwMDAwMDAwIHRvIHNlZWRcbiAqL1xuZnVuY3Rpb24gY2FsY0luZGV4RnJvbTAobGNnQXJnLCBzZWVkKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBfY2FsY0luZGV4RnJvbTAoYSwgYiwgc2VlZCwgaykge1xuICAgICAgICBpZiAoayA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHNlZWQgJiAxKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRvVWludDMyXzEuZGVmYXVsdChNYXRoLmltdWwoX2NhbGNJbmRleEZyb20wKHRvVWludDMyXzEuZGVmYXVsdChNYXRoLmltdWwoYSwgYSkpLCB0b1VpbnQzMl8xLmRlZmF1bHQoTWF0aC5pbXVsKGEgKyAxLCBiKSAvIDIpLCB0b1VpbnQzMl8xLmRlZmF1bHQoc2VlZCAvIDIpLCBrIC0gMSksIDIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0b1VpbnQzMl8xLmRlZmF1bHQoTWF0aC5pbXVsKF9jYWxjSW5kZXhGcm9tMCh0b1VpbnQzMl8xLmRlZmF1bHQoTWF0aC5pbXVsKGEsIGEpKSwgdG9VaW50MzJfMS5kZWZhdWx0KE1hdGguaW11bChhICsgMSwgYikgLyAyKSwgdG9VaW50MzJfMS5kZWZhdWx0KChNYXRoLmltdWwoYSwgc2VlZCkgKyBiKSAvIDIpLCBrIC0gMSksIDIpIC0gMSk7XG4gICAgICAgIH1cbiAgICB9KShsY2dBcmcubXVsdGlwbGllciwgbGNnQXJnLmluY3JlbWVudCwgc2VlZCwgMzIpO1xufVxuLyoqXG4gKiBDYWxjbGF0ZSBpbmRleCBmcm9tIGEgaW5pdGlhbCBzZWVkIHRvIHRoZSB0YXJnZXRlZCBzZWVkLlxuICogQHBhcmFtIGxjZ0FyZyAgICAgIC0gVGhlIGFyZ3VtZW50IG9mIExDRywgd2hvc2UgcHJvcGVydGllcyBhcmUgdHJlYXRlZCBhcyB1bnNpZ25lZCAzMi1iaXQgaW50ZWdlcnNcbiAqIEBwYXJhbSBzZWVkICAgICAgICAtIFRoZSBzZWVkLCB3aG9zZSBpbmRleCBpcyBjYWxjdWxhdGVkXG4gKiBAcGFyYW0gaW5pdGlhbFNlZWQgLSBUaGUgaW5pdGlhbCBzZWVkLCB3aG9zZSBpbmRleCBpcyBhIHJlZmVyZW5jZSBwb2ludFxuICogQHJldHVybnMgICAgICAgICAgIC0gVGhlIGluZGV4IGZyb20gYSBpbml0aWFsIHNlZWQgdG8gdGhlIHRhcmdldGVkIHNlZWQuXG4gKi9cbmZ1bmN0aW9uIGNhbGNJbmRleChsY2dBcmcsIGluaXRpYWxTZWVkLCBzZWVkKSB7XG4gICAgcmV0dXJuIGNhbGNJbmRleEZyb20wKGxjZ0FyZywgc2VlZCkgLSBjYWxjSW5kZXhGcm9tMChsY2dBcmcsIGluaXRpYWxTZWVkKTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbGNJbmRleDtcbiIsImltcG9ydCB7TENHQXJnfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB0b1VpbnQzMiBmcm9tICcuLi9pbnRlcm5hbC90b1VpbnQzMic7XG5cbi8qKlxuICogQ2FsY2xhdGVzIGluZGV4IGZyb20gYSBpbml0aWFsIHNlZWQgMHgwMDAwMDAwMCB0byB0aGUgdGFyZ2V0ZWQgc2VlZC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgYmFzZWQgb24gaHR0cDovL2QuaGF0ZW5hLm5lLmpwL291cG8vMjAxNTAxMjgvMTQyMjQxMzIxOCAoYXV0aG9yOiBvdXBvKVxuICogQHBhcmFtIGxjZ0FyZyAtIFRoZSBhcmd1bWVudCBvZiBMQ0dcbiAqIEBwYXJhbSBzZWVkICAgLSBUaGUgc2VlZCwgd2hpY2ggaXMgdHJlYXRlZCBhcyBhbiB1bnNpZ25lZCAzMi1iaXQgaW50ZWdlclxuICogQHJldHVybnMgICAgICAtIFRoZSBpbmRleCBmcm9tIGEgaW5pdGlhbCBzZWVkIDB4MDAwMDAwMDAgdG8gc2VlZFxuICovXG5mdW5jdGlvbiBjYWxjSW5kZXhGcm9tMChsY2dBcmc6IExDR0FyZywgc2VlZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBfY2FsY0luZGV4RnJvbTAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHNlZWQ6IG51bWJlciwgazogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKGsgPT09IDApIHtcblx0ICAgIFx0cmV0dXJuIDA7XG5cdCAgICB9IGVsc2UgaWYgKChzZWVkICYgMSkgPT09IDApIHtcblx0XHQgICAgcmV0dXJuIHRvVWludDMyKE1hdGguaW11bChfY2FsY0luZGV4RnJvbTAoXG4gICAgICAgICAgICAgICAgdG9VaW50MzIoTWF0aC5pbXVsKGEsIGEpKSxcbiAgICAgICAgICAgICAgICB0b1VpbnQzMihNYXRoLmltdWwoYSArIDEsIGIpIC8gMiksXG4gICAgICAgICAgICAgICAgdG9VaW50MzIoc2VlZCAvIDIpLFxuICAgICAgICAgICAgICAgIGsgLSAxXG4gICAgICAgICAgICApLCAyKSk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdCAgICByZXR1cm4gdG9VaW50MzIoTWF0aC5pbXVsKF9jYWxjSW5kZXhGcm9tMChcbiAgICAgICAgICAgICAgICB0b1VpbnQzMihNYXRoLmltdWwoYSwgYSkpLFxuICAgICAgICAgICAgICAgIHRvVWludDMyKE1hdGguaW11bChhICsgMSwgYikgLyAyKSxcbiAgICAgICAgICAgICAgICB0b1VpbnQzMigoTWF0aC5pbXVsKGEsIHNlZWQpICsgYikgLyAyKSxcbiAgICAgICAgICAgICAgICBrIC0gMVxuICAgICAgICAgICAgKSwgMikgLSAxKTtcblx0ICAgIH1cbiAgICB9KShsY2dBcmcubXVsdGlwbGllciwgbGNnQXJnLmluY3JlbWVudCwgc2VlZCwgMzIpO1xufVxuXG4vKipcbiAqIENhbGNsYXRlIGluZGV4IGZyb20gYSBpbml0aWFsIHNlZWQgdG8gdGhlIHRhcmdldGVkIHNlZWQuXG4gKiBAcGFyYW0gbGNnQXJnICAgICAgLSBUaGUgYXJndW1lbnQgb2YgTENHLCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSB0cmVhdGVkIGFzIHVuc2lnbmVkIDMyLWJpdCBpbnRlZ2Vyc1xuICogQHBhcmFtIHNlZWQgICAgICAgIC0gVGhlIHNlZWQsIHdob3NlIGluZGV4IGlzIGNhbGN1bGF0ZWRcbiAqIEBwYXJhbSBpbml0aWFsU2VlZCAtIFRoZSBpbml0aWFsIHNlZWQsIHdob3NlIGluZGV4IGlzIGEgcmVmZXJlbmNlIHBvaW50XG4gKiBAcmV0dXJucyAgICAgICAgICAgLSBUaGUgaW5kZXggZnJvbSBhIGluaXRpYWwgc2VlZCB0byB0aGUgdGFyZ2V0ZWQgc2VlZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FsY0luZGV4KGxjZ0FyZzogTENHQXJnLCBpbml0aWFsU2VlZDogbnVtYmVyLCBzZWVkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gY2FsY0luZGV4RnJvbTAobGNnQXJnLCBzZWVkKSAtIGNhbGNJbmRleEZyb20wKGxjZ0FyZywgaW5pdGlhbFNlZWQpO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
