'use strict';

var _imul = require('babel-runtime/core-js/math/imul');

var _imul2 = _interopRequireDefault(_imul);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toUint32_1 = require('../internal/toUint32');
/**
 * Calculates the inverse argument of LCG.
 * @param lcgArg - The regular argument of LCG
 * @returns      - The inverse argument of LCG
 */
function calcInverseArg(lcgArg) {
  var inverseArg = { multiplier: 0, increment: 0 };
  var mask = 0xFFFFFFFF;
  inverseArg.multiplier = toUint32_1.default(calcPow(lcgArg.multiplier, mask >>> 1, mask));
  inverseArg.increment = toUint32_1.default(~(0, _imul2.default)(inverseArg.multiplier, lcgArg.increment) + 1);
  return inverseArg;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = calcInverseArg;
/**
 * Returns a specified number raised to the specified power.
 * @param a    - The base number
 * @param n    - The exponent used to raise the base
 * @param mask - The mask to filter number
 * @returns    - The number a raised to the power n and filtered with mask
 */
function calcPow(a, n, mask) {
  return n === 0 ? 1 : (0, _imul2.default)(n & 1 ? a : 1, calcPow((0, _imul2.default)(a, a) & mask, n >>> 1, mask));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY2FsY0ludmVyc2VBcmcudHMiLCJ1dGlsL2NhbGNJbnZlcnNlQXJnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUdBLElBQUEsYUFBQSxRQUFxQixzQkFBckIsQ0FBQTs7Ozs7O0FBT0EsU0FBQSxjQUFBLENBQXVDLE1BQXZDLEVBQXFEO0FBQ2pELE1BQUksYUFBcUIsRUFBQyxZQUFZLENBQVosRUFBZSxXQUFXLENBQVgsRUFBckMsQ0FENkM7QUFFakQsTUFBTSxPQUFPLFVBQVAsQ0FGMkM7QUFJakQsYUFBVyxVQUFYLEdBQXdCLFdBQUEsT0FBQSxDQUFTLFFBQVEsT0FBTyxVQUFQLEVBQW1CLFNBQVMsQ0FBVCxFQUFZLElBQXZDLENBQVQsQ0FBeEIsQ0FKaUQ7QUFLakQsYUFBVyxTQUFYLEdBQXdCLFdBQUEsT0FBQSxDQUFTLENBQUMsb0JBQVUsV0FBVyxVQUFYLEVBQXVCLE9BQU8sU0FBUCxDQUFsQyxHQUFzRCxDQUF0RCxDQUFqQyxDQUxpRDtBQU9qRCxTQUFPLFVBQVAsQ0FQaUQ7Q0FBckQ7QUFBQSxPQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLEVBQUEsT0FBQSxJQUFBLEVBQUE7QUNLQSxRQUFRLE9BQVIsR0FBa0IsY0FBbEI7Ozs7Ozs7O0FEWUEsU0FBQSxPQUFBLENBQWlCLENBQWpCLEVBQTRCLENBQTVCLEVBQXVDLElBQXZDLEVBQW1EO0FBQy9DLFNBQU8sTUFBTSxDQUFOLEdBQVUsQ0FBVixHQUNILG9CQUFXLElBQUksQ0FBSixHQUFRLENBQVIsR0FBWSxDQUFaLEVBQWdCLFFBQVEsb0JBQVUsQ0FBVixFQUFhLENBQWIsSUFBa0IsSUFBbEIsRUFBd0IsTUFBTSxDQUFOLEVBQVMsSUFBekMsQ0FBM0IsQ0FERyxDQUR3QztDQUFuRCIsImZpbGUiOiJ1dGlsL2NhbGNJbnZlcnNlQXJnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge0xDR0FyZ30gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgdG9VaW50MzIgZnJvbSAnLi4vaW50ZXJuYWwvdG9VaW50MzInO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2UgYXJndW1lbnQgb2YgTENHLlxuICogQHBhcmFtIGxjZ0FyZyAtIFRoZSByZWd1bGFyIGFyZ3VtZW50IG9mIExDR1xuICogQHJldHVybnMgICAgICAtIFRoZSBpbnZlcnNlIGFyZ3VtZW50IG9mIExDR1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjSW52ZXJzZUFyZyhsY2dBcmc6IExDR0FyZyk6IExDR0FyZyB7XG4gICAgbGV0IGludmVyc2VBcmc6IExDR0FyZyA9IHttdWx0aXBsaWVyOiAwLCBpbmNyZW1lbnQ6IDB9O1xuICAgIGNvbnN0IG1hc2sgPSAweEZGRkZGRkZGO1xuXG4gICAgaW52ZXJzZUFyZy5tdWx0aXBsaWVyID0gdG9VaW50MzIoY2FsY1BvdyhsY2dBcmcubXVsdGlwbGllciwgbWFzayA+Pj4gMSwgbWFzaykpO1xuICAgIGludmVyc2VBcmcuaW5jcmVtZW50ICA9IHRvVWludDMyKH5NYXRoLmltdWwoaW52ZXJzZUFyZy5tdWx0aXBsaWVyLCBsY2dBcmcuaW5jcmVtZW50KSArIDEpO1xuXG4gICAgcmV0dXJuIGludmVyc2VBcmc7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNwZWNpZmllZCBudW1iZXIgcmFpc2VkIHRvIHRoZSBzcGVjaWZpZWQgcG93ZXIuXG4gKiBAcGFyYW0gYSAgICAtIFRoZSBiYXNlIG51bWJlclxuICogQHBhcmFtIG4gICAgLSBUaGUgZXhwb25lbnQgdXNlZCB0byByYWlzZSB0aGUgYmFzZVxuICogQHBhcmFtIG1hc2sgLSBUaGUgbWFzayB0byBmaWx0ZXIgbnVtYmVyXG4gKiBAcmV0dXJucyAgICAtIFRoZSBudW1iZXIgYSByYWlzZWQgdG8gdGhlIHBvd2VyIG4gYW5kIGZpbHRlcmVkIHdpdGggbWFza1xuICovXG5mdW5jdGlvbiBjYWxjUG93KGE6IG51bWJlciwgbjogbnVtYmVyLCBtYXNrOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBuID09PSAwID8gMSA6XG4gICAgICAgIE1hdGguaW11bCgobiAmIDEgPyBhIDogMSksIGNhbGNQb3coTWF0aC5pbXVsKGEsIGEpICYgbWFzaywgbiA+Pj4gMSwgbWFzaykpO1xufSIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IHRvVWludDMyXzEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC90b1VpbnQzMicpO1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIGFyZ3VtZW50IG9mIExDRy5cbiAqIEBwYXJhbSBsY2dBcmcgLSBUaGUgcmVndWxhciBhcmd1bWVudCBvZiBMQ0dcbiAqIEByZXR1cm5zICAgICAgLSBUaGUgaW52ZXJzZSBhcmd1bWVudCBvZiBMQ0dcbiAqL1xuZnVuY3Rpb24gY2FsY0ludmVyc2VBcmcobGNnQXJnKSB7XG4gICAgbGV0IGludmVyc2VBcmcgPSB7IG11bHRpcGxpZXI6IDAsIGluY3JlbWVudDogMCB9O1xuICAgIGNvbnN0IG1hc2sgPSAweEZGRkZGRkZGO1xuICAgIGludmVyc2VBcmcubXVsdGlwbGllciA9IHRvVWludDMyXzEuZGVmYXVsdChjYWxjUG93KGxjZ0FyZy5tdWx0aXBsaWVyLCBtYXNrID4+PiAxLCBtYXNrKSk7XG4gICAgaW52ZXJzZUFyZy5pbmNyZW1lbnQgPSB0b1VpbnQzMl8xLmRlZmF1bHQofk1hdGguaW11bChpbnZlcnNlQXJnLm11bHRpcGxpZXIsIGxjZ0FyZy5pbmNyZW1lbnQpICsgMSk7XG4gICAgcmV0dXJuIGludmVyc2VBcmc7XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjSW52ZXJzZUFyZztcbi8qKlxuICogUmV0dXJucyBhIHNwZWNpZmllZCBudW1iZXIgcmFpc2VkIHRvIHRoZSBzcGVjaWZpZWQgcG93ZXIuXG4gKiBAcGFyYW0gYSAgICAtIFRoZSBiYXNlIG51bWJlclxuICogQHBhcmFtIG4gICAgLSBUaGUgZXhwb25lbnQgdXNlZCB0byByYWlzZSB0aGUgYmFzZVxuICogQHBhcmFtIG1hc2sgLSBUaGUgbWFzayB0byBmaWx0ZXIgbnVtYmVyXG4gKiBAcmV0dXJucyAgICAtIFRoZSBudW1iZXIgYSByYWlzZWQgdG8gdGhlIHBvd2VyIG4gYW5kIGZpbHRlcmVkIHdpdGggbWFza1xuICovXG5mdW5jdGlvbiBjYWxjUG93KGEsIG4sIG1hc2spIHtcbiAgICByZXR1cm4gbiA9PT0gMCA/IDEgOlxuICAgICAgICBNYXRoLmltdWwoKG4gJiAxID8gYSA6IDEpLCBjYWxjUG93KE1hdGguaW11bChhLCBhKSAmIG1hc2ssIG4gPj4+IDEsIG1hc2spKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
