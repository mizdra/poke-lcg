"use strict";

var _imul = require("babel-runtime/core-js/math/imul");

var _imul2 = _interopRequireDefault(_imul);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toUint32_1 = require('../internal/toUint32');
/**
 * Calculates the inverse argument of LCG.
 * @param lcgArg - The regular argument of LCG
 * @returns      - The inverse argument of LCG
 */
function calcInverseArg(lcgArg) {
  var inverseArg = { multiplier: 0, increment: 0 };
  var mask = 0xFFFFFFFF;
  inverseArg.multiplier = toUint32_1.default(calcPow(lcgArg.multiplier, mask >>> 1, mask));
  inverseArg.increment = toUint32_1.default(~(0, _imul2.default)(inverseArg.multiplier, lcgArg.increment) + 1);
  return inverseArg;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = calcInverseArg;
/**
 * Returns a specified number raised to the specified power.
 * @param a    - The base number
 * @param n    - The exponent used to raise the base
 * @param mask - The mask to filter number
 * @returns    - The number a raised to the power n and filtered with mask
 */
function calcPow(a, n, mask) {
  return n === 0 ? 1 : (0, _imul2.default)(n & 1 ? a : 1, calcPow((0, _imul2.default)(a, a) & mask, n >>> 1, mask));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY2FsY0ludmVyc2VBcmcuanMiLCJ1dGlsL2NhbGNJbnZlcnNlQXJnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQ0NBLElBQUEsYUFBQSxRQUFxQixzQkFBckIsQ0FBQTs7Ozs7O0FBT0EsU0FBQSxjQUFBLENBQXVDLE1BQXZDLEVBQXFEO0FBQ2pELE1BQUksYUFBcUIsRUFBQyxZQUFZLENBQVosRUFBZSxXQUFXLENBQVgsRUFBckMsQ0FENkM7QUFFakQsTUFBTSxPQUFPLFVBQVAsQ0FGMkM7QUFJakQsYUFBVyxVQUFYLEdBQXdCLFdBQUEsT0FBQSxDQUFTLFFBQVEsT0FBTyxVQUFQLEVBQW1CLFNBQVMsQ0FBVCxFQUFZLElBQXZDLENBQVQsQ0FBeEIsQ0FKaUQ7QUFLakQsYUFBVyxTQUFYLEdBQXdCLFdBQUEsT0FBQSxDQUFTLENBQUMsb0JBQVUsV0FBVyxVQUFYLEVBQXVCLE9BQU8sU0FBUCxDQUFsQyxHQUFzRCxDQUF0RCxDQUFqQyxDQUxpRDtBQU9qRCxTQUFPLFVBQVAsQ0FQaUQ7Q0FBckQ7QUFBQSxPQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLEVBQUEsT0FBQSxJQUFBLEVBQUE7QURPQSxRQUFRLE9BQVIsR0FBa0IsY0FBbEI7Ozs7Ozs7O0FDVUEsU0FBQSxPQUFBLENBQWlCLENBQWpCLEVBQTRCLENBQTVCLEVBQXVDLElBQXZDLEVBQW1EO0FBQy9DLFNBQU8sTUFBTSxDQUFOLEdBQVUsQ0FBVixHQUNILG9CQUFXLElBQUksQ0FBSixHQUFRLENBQVIsR0FBWSxDQUFaLEVBQWdCLFFBQVEsb0JBQVUsQ0FBVixFQUFhLENBQWIsSUFBa0IsSUFBbEIsRUFBd0IsTUFBTSxDQUFOLEVBQVMsSUFBekMsQ0FBM0IsQ0FERyxDQUR3QztDQUFuRCIsImZpbGUiOiJ1dGlsL2NhbGNJbnZlcnNlQXJnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0b1VpbnQzMl8xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvdG9VaW50MzInKTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBhcmd1bWVudCBvZiBMQ0cuXG4gKiBAcGFyYW0gbGNnQXJnIC0gVGhlIHJlZ3VsYXIgYXJndW1lbnQgb2YgTENHXG4gKiBAcmV0dXJucyAgICAgIC0gVGhlIGludmVyc2UgYXJndW1lbnQgb2YgTENHXG4gKi9cbmZ1bmN0aW9uIGNhbGNJbnZlcnNlQXJnKGxjZ0FyZykge1xuICAgIGxldCBpbnZlcnNlQXJnID0geyBtdWx0aXBsaWVyOiAwLCBpbmNyZW1lbnQ6IDAgfTtcbiAgICBjb25zdCBtYXNrID0gMHhGRkZGRkZGRjtcbiAgICBpbnZlcnNlQXJnLm11bHRpcGxpZXIgPSB0b1VpbnQzMl8xLmRlZmF1bHQoY2FsY1BvdyhsY2dBcmcubXVsdGlwbGllciwgbWFzayA+Pj4gMSwgbWFzaykpO1xuICAgIGludmVyc2VBcmcuaW5jcmVtZW50ID0gdG9VaW50MzJfMS5kZWZhdWx0KH5NYXRoLmltdWwoaW52ZXJzZUFyZy5tdWx0aXBsaWVyLCBsY2dBcmcuaW5jcmVtZW50KSArIDEpO1xuICAgIHJldHVybiBpbnZlcnNlQXJnO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsY0ludmVyc2VBcmc7XG4vKipcbiAqIFJldHVybnMgYSBzcGVjaWZpZWQgbnVtYmVyIHJhaXNlZCB0byB0aGUgc3BlY2lmaWVkIHBvd2VyLlxuICogQHBhcmFtIGEgICAgLSBUaGUgYmFzZSBudW1iZXJcbiAqIEBwYXJhbSBuICAgIC0gVGhlIGV4cG9uZW50IHVzZWQgdG8gcmFpc2UgdGhlIGJhc2VcbiAqIEBwYXJhbSBtYXNrIC0gVGhlIG1hc2sgdG8gZmlsdGVyIG51bWJlclxuICogQHJldHVybnMgICAgLSBUaGUgbnVtYmVyIGEgcmFpc2VkIHRvIHRoZSBwb3dlciBuIGFuZCBmaWx0ZXJlZCB3aXRoIG1hc2tcbiAqL1xuZnVuY3Rpb24gY2FsY1BvdyhhLCBuLCBtYXNrKSB7XG4gICAgcmV0dXJuIG4gPT09IDAgPyAxIDpcbiAgICAgICAgTWF0aC5pbXVsKChuICYgMSA/IGEgOiAxKSwgY2FsY1BvdyhNYXRoLmltdWwoYSwgYSkgJiBtYXNrLCBuID4+PiAxLCBtYXNrKSk7XG59XG4iLCJpbXBvcnQge0xDR0FyZ30gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgdG9VaW50MzIgZnJvbSAnLi4vaW50ZXJuYWwvdG9VaW50MzInO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2UgYXJndW1lbnQgb2YgTENHLlxuICogQHBhcmFtIGxjZ0FyZyAtIFRoZSByZWd1bGFyIGFyZ3VtZW50IG9mIExDR1xuICogQHJldHVybnMgICAgICAtIFRoZSBpbnZlcnNlIGFyZ3VtZW50IG9mIExDR1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjSW52ZXJzZUFyZyhsY2dBcmc6IExDR0FyZyk6IExDR0FyZyB7XG4gICAgbGV0IGludmVyc2VBcmc6IExDR0FyZyA9IHttdWx0aXBsaWVyOiAwLCBpbmNyZW1lbnQ6IDB9O1xuICAgIGNvbnN0IG1hc2sgPSAweEZGRkZGRkZGO1xuXG4gICAgaW52ZXJzZUFyZy5tdWx0aXBsaWVyID0gdG9VaW50MzIoY2FsY1BvdyhsY2dBcmcubXVsdGlwbGllciwgbWFzayA+Pj4gMSwgbWFzaykpO1xuICAgIGludmVyc2VBcmcuaW5jcmVtZW50ICA9IHRvVWludDMyKH5NYXRoLmltdWwoaW52ZXJzZUFyZy5tdWx0aXBsaWVyLCBsY2dBcmcuaW5jcmVtZW50KSArIDEpO1xuXG4gICAgcmV0dXJuIGludmVyc2VBcmc7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNwZWNpZmllZCBudW1iZXIgcmFpc2VkIHRvIHRoZSBzcGVjaWZpZWQgcG93ZXIuXG4gKiBAcGFyYW0gYSAgICAtIFRoZSBiYXNlIG51bWJlclxuICogQHBhcmFtIG4gICAgLSBUaGUgZXhwb25lbnQgdXNlZCB0byByYWlzZSB0aGUgYmFzZVxuICogQHBhcmFtIG1hc2sgLSBUaGUgbWFzayB0byBmaWx0ZXIgbnVtYmVyXG4gKiBAcmV0dXJucyAgICAtIFRoZSBudW1iZXIgYSByYWlzZWQgdG8gdGhlIHBvd2VyIG4gYW5kIGZpbHRlcmVkIHdpdGggbWFza1xuICovXG5mdW5jdGlvbiBjYWxjUG93KGE6IG51bWJlciwgbjogbnVtYmVyLCBtYXNrOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBuID09PSAwID8gMSA6XG4gICAgICAgIE1hdGguaW11bCgobiAmIDEgPyBhIDogMSksIGNhbGNQb3coTWF0aC5pbXVsKGEsIGEpICYgbWFzaywgbiA+Pj4gMSwgbWFzaykpO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
